{"version":3,"sources":["utils/index.ts","store/contact.slice.ts","constants/index.ts","features/loading-indicator/LoadingIndicator.tsx","features/grid/Grid.tsx","features/filters/Filters.tsx","features/checkbox/Checkbox.tsx","features/search/Search.tsx","pages/list/List.tsx","store/detail.slice.ts","features/description-list/DescriptionList.tsx","features/nav/Nav.tsx","pages/contact-details/ContactDetails.tsx","features/not-found/NotFound.tsx","features/App.tsx","store/index.ts","serviceWorker.ts","index.tsx"],"names":["objectToQueryString","queryParameters","Object","entries","reduce","queryString","index","key","val","symbol","length","propsStringify","obj","acc","value","String","capitalize","input","lower","toLowerCase","firstLetter","slice","replace","toUpperCase","dateFormatter","dateSource","locales","options","date","Date","Intl","DateTimeFormat","format","contactSlice","createSlice","name","initialState","reducers","getContacts","_","action","payload","actions","fetchContacts","filters","dispatch","a","params","fetch","then","data","json","res","selectContacts","state","contacts","contactReducer","reducer","LoadingIndicator","title","className","Gird","dataSource","titles","map","forTruthy","forFalthy","Title","Name","BirthDate","IsFavorite","UserID","to","Boolean","Number","colSpan","Filters","children","Checkbox","label","useState","uuid","id","useDispatch","type","onChange","event","checked","target","htmlFor","Search","placeholder","debounceTimeout","List","useSelector","useEffect","detailSlice","getDetail","selectDetail","detail","detailReducer","DescriptionList","render","Nav","ContactDetails","ContactDetail","useParams","history","useHistory","goBack","UserId","onClick","ContactDetailType","ContactDetailContent","renderContactDetail","NotFound","App","exact","path","store","configureStore","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ed78078.chunk.js","sourcesContent":["export const boolAsStringFormatter = (\r\n  boolAsString: string | number,\r\n  forTruthy: string,\r\n  forFalthy: string\r\n) => {\r\n  return Boolean(Number(boolAsString)) ? forTruthy : forFalthy;\r\n};\r\n\r\nexport const boolToStringFormatter = <T = string>(bool: boolean, forTruthy: T, forFalthy: T): T =>\r\n  bool ? forTruthy : forFalthy;\r\n\r\n// https://www.30secondsofcode.org/js/s/object-to-query-string\r\nexport const objectToQueryString = <T>(queryParameters: T): string => {\r\n  return queryParameters\r\n    ? Object.entries(queryParameters).reduce((queryString, [key, val], index) => {\r\n        const symbol = queryString.length === 0 ? \"?\" : \"&\";\r\n        queryString += typeof val === \"string\" ? `${symbol}${key}=${val}` : \"\";\r\n        return queryString;\r\n      }, \"\")\r\n    : \"\";\r\n};\r\n\r\n//www.30secondsofcode.org/js/s/get-url-parameters\r\nexport const getURLParameters = (url: string) => {\r\n  return (url.match(/([^?=&]+)(=([^&]*))/g) || []).reduce(\r\n    // eslint-disable-next-line no-sequences\r\n    (a, v) => ((a[v.slice(0, v.indexOf(\"=\"))] = v.slice(v.indexOf(\"=\") + 1)), a),\r\n    {} as any\r\n  );\r\n};\r\n\r\nexport const propsStringify = (obj: object) =>\r\n  Object.entries(obj).reduce((acc, [key, value]) => {\r\n    return { ...acc, [key]: String(value) };\r\n  }, {});\r\n\r\nexport const capitalize = (input: string = \"\") => {\r\n  if (!input.length) {\r\n    return input;\r\n  }\r\n\r\n  const lower = input.toLowerCase();\r\n  const firstLetter = lower.slice(0, 1);\r\n\r\n  return lower.replace(firstLetter, firstLetter.toUpperCase());\r\n};\r\n\r\nexport const dateFormatter = (\r\n  dateSource: string,\r\n  locales = \"en-GB\",\r\n  options: Intl.DateTimeFormatOptions = {}\r\n) => {\r\n  const date = new Date(dateSource);\r\n\r\n  return new Intl.DateTimeFormat(locales, options).format(date);\r\n};\r\n\r\nexport const withFilters = <T>(data: T[], filters: Partial<T>): T[] => {\r\n  const filterHandler = (item: T) =>\r\n    Object.entries(filters).reduce((acc, [key, value]) => {\r\n      switch (key) {\r\n        case \"IsFavorite\":\r\n          return (acc = acc ? (item as any)[key] === value : false);\r\n\r\n        case \"Name\":\r\n          return (acc = acc\r\n            ? (item as any)[key].toLowerCase().includes((value as string).toLowerCase())\r\n            : false);\r\n\r\n        default:\r\n          return true;\r\n      }\r\n    }, true);\r\n\r\n  return data.filter(filterHandler);\r\n};\r\n","import { Contact, PartialContact } from \"../interfaces/contact.interface\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState, AppThunk } from \".\";\r\nimport { contactsURL } from \"../constants\";\r\nimport { objectToQueryString, propsStringify } from \"../utils\";\r\n\r\nconst initialState: Contact[] = [] as Contact[];\r\n\r\nexport const contactSlice = createSlice({\r\n  name: \"contact-table\",\r\n  initialState,\r\n  reducers: {\r\n    getContacts(_, action: PayloadAction<Contact[]>) {\r\n      return action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { getContacts } = contactSlice.actions;\r\n\r\nexport const fetchContacts = (filters: PartialContact = {}): AppThunk => async (dispatch) => {\r\n  const params = objectToQueryString(propsStringify(filters));\r\n\r\n  const res = await fetch(contactsURL + params).then<Contact[]>((data) => data.json());\r\n\r\n  dispatch(getContacts(res));\r\n};\r\n\r\nexport const selectContacts = (state: RootState) => state.contacts;\r\n\r\nexport const contactReducer = contactSlice.reducer;\r\n","export const contactsURL = \"/v1/contacts/\";\r\n","import React, { FC } from \"react\";\r\n\r\nimport \"./LoadingIndicator.scss\";\r\n\r\ninterface Props {\r\n  title?: string;\r\n}\r\n\r\nexport const LoadingIndicator: FC<Props> = ({ title = \"Loading\" }) => (\r\n  <div className=\"loading-indicator\">{title}</div>\r\n);\r\n","import React, { FC } from \"react\";\r\nimport { Contact } from \"../../interfaces/contact.interface\";\r\nimport { boolAsStringFormatter, capitalize, dateFormatter } from \"../../utils\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { LoadingIndicator } from \"../loading-indicator/LoadingIndicator\";\r\n\r\nimport \"./Grid.scss\";\r\n\r\ninterface Props {\r\n  titles: string[];\r\n  data: Contact[];\r\n}\r\n\r\nexport const Gird: FC<Props> = ({ titles = [], data = [] }) => {\r\n  const renderTbody = (dataSource: typeof data) => {\r\n    if (!dataSource.length) {\r\n      return (\r\n        <tr>\r\n          <td colSpan={titles.length}>\r\n            <LoadingIndicator />\r\n          </td>\r\n        </tr>\r\n      );\r\n    }\r\n\r\n    return dataSource.map(({ Title, Name, BirthDate, IsFavorite, UserID }) => (\r\n      <tr key={UserID}>\r\n        <td>\r\n          <Link to={`/details/${UserID}`}>\r\n            {capitalize(Title ?? \"\")} {Name}\r\n          </Link>\r\n        </td>\r\n        <td>{dateFormatter(BirthDate)}</td>\r\n        <td>{boolAsStringFormatter(IsFavorite, \"✔\", \"\")}</td>\r\n      </tr>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <table className=\"grid-table\">\r\n      <thead>\r\n        <tr>\r\n          {titles.map((title, index) => (\r\n            <th key={index}>{title}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>{renderTbody(data)}</tbody>\r\n    </table>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport \"./Filters.scss\";\r\n\r\nexport const Filters: FC = ({ children }) => {\r\n  return <div className=\"filters\">{children}</div>;\r\n};\r\n","import React, { FC, ChangeEvent, useState } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { fetchContacts } from \"../../store/contact.slice\";\r\n\r\nimport \"./Checkbox.scss\";\r\n\r\ninterface Props {\r\n  label: string;\r\n}\r\n\r\nexport const Checkbox: FC<Props> = ({ label }) => {\r\n  const [id] = useState(() => uuid());\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onChanged = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const checked = event.target.checked;\r\n\r\n    dispatch(fetchContacts(checked ? { IsFavorite: \"1\" } : {}));\r\n  };\r\n\r\n  return (\r\n    <div className=\"checkbox\">\r\n      <input type=\"checkbox\" id={id} onChange={onChanged} />\r\n      <label htmlFor={id}>{label}</label>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC, ChangeEvent } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { fetchContacts } from \"../../store/contact.slice\";\r\nimport { DebounceInput } from \"react-debounce-input\";\r\n\r\nimport \"./Search.scss\";\r\n\r\ninterface Props {\r\n  placeholder?: string;\r\n}\r\n\r\nexport const Search: FC<Props> = ({ placeholder }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const changeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const Name = event.target.value;\r\n\r\n    dispatch(fetchContacts(Name.length ? { Name } : {}));\r\n  };\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <label className=\"name-search-label\" htmlFor=\"name-search\">\r\n        Search for\r\n      </label>\r\n      <DebounceInput\r\n        id=\"name-search\"\r\n        className=\"field\"\r\n        placeholder={placeholder ?? \"Name\"}\r\n        type=\"search\"\r\n        debounceTimeout={300}\r\n        onChange={changeHandler}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectContacts, fetchContacts } from \"../../store/contact.slice\";\r\nimport { Gird } from \"../../features/grid/Grid\";\r\nimport { Filters } from \"../../features/filters/Filters\";\r\nimport { Checkbox } from \"../../features/checkbox/Checkbox\";\r\nimport { Search } from \"../../features/search/Search\";\r\n\r\nimport \"./List.scss\";\r\n\r\nexport const List = () => {\r\n  const contactTitle = [\"Name\", \"Birth Date\", \"Favorite\"];\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(selectContacts);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Filters>\r\n        <Checkbox label=\"Favorite Only\" />\r\n        <Search />\r\n      </Filters>\r\n\r\n      <Gird titles={contactTitle} data={contacts} />\r\n    </div>\r\n  );\r\n};\r\n","import { Contact } from \"../interfaces/contact.interface\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState, AppThunk } from \".\";\r\nimport { contactsURL } from \"../constants\";\r\n\r\nconst initialState: Contact = {} as Contact;\r\n\r\nexport const detailSlice = createSlice({\r\n  name: \"detail\",\r\n  initialState,\r\n  reducers: {\r\n    getDetail(_, action: PayloadAction<Contact>) {\r\n      return action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { getDetail } = detailSlice.actions;\r\n\r\nexport const fetchDetail = (UserId: string): AppThunk => async (dispatch) => {\r\n  const res = await fetch(contactsURL + UserId).then<Contact>((data) => data.json());\r\n\r\n  dispatch(getDetail(res));\r\n};\r\n\r\nexport const selectDetail = (state: RootState) => state.detail;\r\n\r\nexport const detailReducer = detailSlice.reducer;\r\n","import React, { FC } from \"react\";\r\n\r\nimport \"./DescriptionList.scss\";\r\n\r\ninterface Props {\r\n  render: () => JSX.Element | null;\r\n}\r\n\r\nexport const DescriptionList: FC<Props> = ({ render }) => (\r\n  <div className=\"description-list\">{render()}</div>\r\n);\r\n","import React, { FC } from \"react\";\r\n\r\nimport \"./Nav.scss\";\r\n\r\ninterface Props {\r\n  render: () => JSX.Element | null;\r\n}\r\n\r\nexport const Nav: FC<Props> = ({ render }) => <div className=\"nav\">{render()}</div>;\r\n","import React, { FC, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchDetail, selectDetail } from \"../../store/detail.slice\";\r\nimport { capitalize, dateFormatter } from \"../../utils\";\r\nimport { Contact } from \"../../interfaces/contact.interface\";\r\nimport { DescriptionList } from \"../../features/description-list/DescriptionList\";\r\nimport { Nav } from \"../../features/nav/Nav\";\r\n\r\nimport \"./ContactDetails.scss\";\r\n\r\ninterface Props {}\r\n\r\nexport const ContactDetails: FC<Props> = () => {\r\n  const dispatch = useDispatch();\r\n  const { Title, Name, BirthDate, ContactDetail } = useSelector(selectDetail);\r\n  const { UserID } = useParams();\r\n  const history = useHistory();\r\n\r\n  const goBack = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  const renderNav = () => (\r\n    <div className=\"go-back\" onClick={goBack}>\r\n      Back\r\n    </div>\r\n  );\r\n\r\n  const renderBirthday = (birthday: Contact[\"BirthDate\"]) =>\r\n    birthday ? (\r\n      <div className=\"dl-group\">\r\n        <dt>Birthday</dt>\r\n        <dd>{dateFormatter(BirthDate)}</dd>\r\n      </div>\r\n    ) : null;\r\n\r\n  const renderContactDetail = (\r\n    detail: Pick<typeof ContactDetail, \"ContactDetailType\" | \"ContactDetailContent\">\r\n  ) => {\r\n    if (!detail) {\r\n      return null;\r\n    }\r\n\r\n    const { ContactDetailType, ContactDetailContent } = detail;\r\n\r\n    return ContactDetailType ? (\r\n      <div className=\"dl-group\">\r\n        <dt>{ContactDetailType}</dt>\r\n        <dd>{ContactDetailContent}</dd>\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchDetail(UserID));\r\n  }, [UserID, dispatch]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Nav render={() => renderNav()} />\r\n\r\n      <h1>\r\n        {capitalize(Title)} {Name}\r\n      </h1>\r\n      <dl>\r\n        <DescriptionList render={() => renderBirthday(BirthDate)} />\r\n        <DescriptionList render={() => renderContactDetail(ContactDetail)} />\r\n      </dl>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\n\r\nimport \"./NotFound.scss\";\r\n\r\ninterface Props {}\r\n\r\nexport const NotFound: FC<Props> = () => {\r\n  return <div className=\"full-screen\">404 Dinosaur Lost</div>;\r\n};\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { List } from \"../pages/list/List\";\r\nimport { ContactDetails } from \"../pages/contact-details/ContactDetails\";\r\nimport { NotFound } from \"./not-found/NotFound\";\r\n\r\nexport const App = () => (\r\n  <Router>\r\n    <Switch>\r\n      <Route exact path=\"/\">\r\n        <List />\r\n      </Route>\r\n\r\n      <Route path=\"/details/:UserID\">\r\n        <ContactDetails />\r\n      </Route>\r\n\r\n      <Route path=\"*\">\r\n        <NotFound />\r\n      </Route>\r\n    </Switch>\r\n  </Router>\r\n);\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport { contactReducer } from \"./contact.slice\";\r\nimport { detailReducer } from \"./detail.slice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n    detail: detailReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport { App } from \"./features/App\";\r\nimport { store } from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  const { worker } = require(\"./mocks/browser\");\r\n\r\n  worker.start();\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}